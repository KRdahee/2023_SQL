[데이터에서 유사한 값 찾기 - LIKE]

입사 날짜가 7과 관련된 직원들에게 선물을 주는 이벤트를 진행하려고 합니다.
앞서 배운 SELECT에 LIKE문을 추가하여 hire_date에 조건을 넣어 employees 테이블에서 검색해보세요.

지시사항
1. employees 테이블에서 '1997-07-07' 일 입사한 회원을 검색해보세요.
2. 검색할 때는 모든 컬럼을 검색하도록 합시다.

Tips
LIKE 문은 대소문자를 우선순위로 구분합니다. 예를 들어 th로 검색을 한다면 th, Th, TH 순으로 정렬되어 검색합니다.

-- 아래에 hire_date가 1997-07-07인 직원만 조회하는 쿼리를 작성해주세요.
SELECT * FROM employees WHERE hire_date LIKE '1997-07-07';

[와일드 카드를 사용한 검색 - LIKE, WILDCARDS 1]

영어단어 The Little로 시작하는 책과 영어단어 and가 포함돼 있는 책과 Rings로 끝나는 책을 빌리는 이용자들만 따로 추첨하는 이벤트를 진행하려고 합니다.
해당 이벤트를 시작하기 전에 먼저 The Little로 시작하는 책과 and가 포함된 책과 Rings로 끝나는 책만 공지하여 봅시다.
앞서 배운 SELECT에 LIKE문을 추가하여 책 제목에 여러 가지 조건을 넣어 원하는 책만 조회해 보세요.

지시사항

book테이블에서 The Little로 시작하는 책을 검색해보세요.
book테이블에서 and가 포함된 책을 검색해보세요.
book테이블에서 Rings로 끝나는 책을 검색해보세요.
출력할 때는 모든 컬럼을 출력하도록 합시다.
book테이블의 각 컬럼은 다음과 같습니다.

Tips
LIKE 문은 대소문자를 우선순위로 구분합니다. 예를 들어 th로 검색을 한다면 th, Th, TH 순으로 정렬되어 출력합니다.

-- 책들의 정보가 담겨있는 테이블의 구조를 조회합니다. 수정하실 필요는 없습니다.
DESC book;

-- 아래에 제목이 The Little로 시작하는 책만 조회하는 쿼리를 작성해주세요.
SELECT * FROM book WHERE title LIKE 'The Little%';
-- 아래에 제목에 and가 포함된 책만 조회하는 쿼리를 작성해주세요.
SELECT * FROM book WHERE title LIKE '%and%';
-- 아래에 제목이 Rings로 끝나는 책만 조회하는 쿼리를 작성해주세요.
SELECT * FROM book WHERE title LIKE '%Rings';


[와일드 카드를 사용한 검색 - LIKE, WILDCARDS 2]

다시 한 번 입사 날짜과 7과 관련된 직원들에게 선물을 주는 이벤트를 진행하려고 합니다.
다만 이번에는 좀 더 많은 인원들에게 상품을 주기 위해 hire_date에 7이 들어가기만 하면 상품을 주려고 합니다. 해당 하는 사람들을 employees 테이블에서 검색해 봅시다.
앞서 배운 SELECT에 LIKE문과 와일드 카드(%) 를 추가하여 hire_date에 여러 가지 조건을 넣어 원하는 직원만 검색해보세요.

지시사항
employees 테이블에서 hire_date에 7이 들어가는 직원들을 검색해보세요.
검색할 때는 모든 컬럼을 검색하도록 합시다.

-- 아래에 hire_date에 7이 들어가는 직원을 조회하는 쿼리를 작성해주세요.
SELECT *
FROM employees
WHERE hire_date LIKE '%7%';

[데이터 정렬하기 - ORDER BY 1]

책들을 정리해서 조회하기로 하였는데, 내부의 id를 기준으로 출력하니 이용자들이 혼란에 빠졌습니다.
이번에는 책 제목을 기준으로 오름차순 정렬로 조회해보고자 합니다.

지시사항
book 테이블에서 SELECT문에 ORDER BY문을 추가하여 책 제목을 기준으로 오름차순 정렬로 조회해 봅시다.
출력할 때는 *을 이용해 모든 컬럼을 출력하도록 합니다.
book 테이블의 각 컬럼은 다음과 같습니다.

--- book 테이블의 구조를 조회합니다. 수정하실 필요는 없습니다.
DESC book;

-- book 테이블의 내용을 조회해 봅시다. 이때 책 제목을 기준으로 오름차순으로 조회해 봅시다.

SELECT * FROM book
ORDER BY title ASC;

[데이터 정렬하기 - ORDER BY 2]

salaries 테이블에는 직원들의 연도별 연봉이 들어있습니다.
연봉을 정리해서 조회하기로 하였는데, 내부의 emp_no을 기준으로 출력하니 이용자들이 혼란에 빠졌습니다.
이번에는 연봉액을 기준으로 오름차순 정렬로 검색하고자 합니다.

지시사항
salaries 테이블에서 SELECT문에 ORDER BY문을 추가하여 salary를 기준으로 오름차순 정렬로 검색해봅시다.
검색할 때는 *을 이용해 모든 컬럼을 검색하도록 합니다.

-- salaries 테이블의 내용을 출력해 봅시다. 이때 연봉액 제목을 기준으로 오름차순으로 출력해 봅시다.

SELECT *
FROM salaries
ORDER BY salary ASC;

-- 위의 쿼리는 salaries 테이블에서 모든 컬럼을 검색하며, salary를 기준으로 오름차순으로 정렬하여 출력합니다

[새로운 데이터 삽입하기]
주식회사 엘리스에 신입사원이 입사했습니다.
employees 테이블의 구조를 참고하여 신입사원의 정보를 데이터베이스에 넣어봅시다.

지시사항
1. 아래의 정보를 employees 테이블에 넣어보세요.
  emp_no : 10001
  birth_date : '1953-09-02'
  first_name : 'Georgi'
  last_name : 'Facello'
  gender : 'M'
  hire_date : '1986-06-26'
  superior_no : NULL

Tips
정수, 실수 자료형의 경우 그대로 작성하고 문자, 날짜 등은 작은따옴표 '로 감싸면 됩니다.
오타에 신경써서 값을 넣고 값을 잘 넣었는지 검색문을 이용해 확인해보세요.

-- INSERT문을 이용해 쿼리를 작성해 보세요.
INSERT INTO employees (emp_no, birth_date, first_name, last_name, gender, hire_date, superior_no)
VALUES (10001, '1953-09-02', 'Georgi', 'Facello', 'M', '1986-06-26', NULL);

-- 값을 잘 넣었는지 확인하는 코드입니다. 수정하지마세요!
SELECT * FROM employees;


[데이터 수정하기 1]

도서관에서는 대출과 반납 현황 역시 DB를 이용해 관리합니다.
빌려 갈 때 rental 테이블에 값을 추가하는데 이때 반납시간은 NULL로 두었다가 반납할 때, 반납 시간을 기록합니다.
Elice 회원이 2019-04-05 12:00:30에 책을 반납하였습니다.
이에 맞게 반납시간을 NULL에서 올바른 시간으로 변경해 봅시다.

지시사항
Elice회원의 id는 1000번입니다. rental 테이블에 1000번 회원의 반납시간을 '2019-04-05 12:00:30' 로 바꿔봅시다.
rental 테이블은 아래와 같은 구조를 가집니다.

Tips
UPDATE 구문을 사용해서 컬럼을 수정할 수 있습니다.
Elice 회원의 rental_end_date를 수정하기

-- 대출 반납의 정보가 담긴 테이블의 구조를 조회합니다. 수정하실 필요는 없습니다.
DESC rental;

-- 반납 시간을 수정하는 쿼리를 작성해 보세요.
UPDATE rental
SET rental_end_date = '2019-04-05 12:00:30'
WHERE id = 1000;
-- 이 쿼리를 실행하면 rental 테이블에서 id가 1000인 행의 rental_end_date 값을 ‘2019-04-05 12:00:30’으로 업데이트할 수 있습니다.
-- 대출 반납 상태를 조회합니다. 반납시간이 올바르게 추가되었는지는 실행버튼을 통해 확인할 수 있습니다.
SELECT * FROM rental;

[데이터 수정하기 2]
회사에서는 직원들을 관리하기 위한 데이터베이스를 관리합니다.
직원들 정보가 들어있는 employees 테이블에 값이 잘못 입력된 것이 있습니다.
신입사원 'Facello Georgi' 의 생년월일을 잘못 입력하여 수정하려고 합니다.
'Facello Georgi' 의 직원 번호는 10001입니다.

지시사항
employees 테이블에서 emp_no이 10001인 직원의 생년월일(birth_date)을 '1953-09-01' 으로 수정해보세요.

Tips!
emp_no은 INT 타입이기 때문에 정수형 데이터를 넣어야 하지만, 해설 영상처럼 따옴표를 감싸서 넣어도 오류가 발생하지는 않습니다.

-- UPDATE문을 이용해 쿼리를 작성해 보세요.
UPDATE employees
SET birth_date = '1953-09-01'
WHERE emp_no = 10001;
-- 위의 UPDATE 문을 실행하면 ‘Facello Georgi’의 생년월일이 ‘1953-09-01’로 수정됩니다. 수정된 값을 확인하기 위해 아래의 코드를 실행하세요.
-- 값을 잘 수정했는지 확인하는 코드입니다. 수정하지마세요!
SELECT * FROM employees;
