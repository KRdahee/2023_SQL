[판매기록 조회하기]

엘리스는 가게에서 각 물건이 언제 얼마나 많이 팔렸는지 확인해보려고 합니다.
그래서 판매기록이 담긴 sale테이블을 조회하려고 합니다.
이때, 각 상품별로 정리해서 보기 위해 product테이블과 연결해서 product테이블이 중심이 되도록 조회하려고 합니다.
여러분이 엘리스가 하려는 작업을 도와주세요!

지시사항
sale테이블의 모든 컬럼을 조회하되 product테이블과 연결해 조회해 보세요.
연결할 때에는 product테이블의 id와 sale테이블의 product_id를 기준으로 연결해 보세요.
이때 product테이블이 중심이 되도록 연결해 보세요.

-- 판매기록을 product 테이블과 연결해 출력해 봅시다.
-- 이때 product테이블이 중심이 되도록 해 봅시다.
SELECT *
FROM product
JOIN sale
ON product.id = sale.product_id;

[인기 있는 물건]

주식회사 엘리스에는 여러 물건들을 팔고 있습니다.
sale 테이블에 물건이 판매될 때마다 판매된 양과 수익이 기록되어 있습니다.
물건 생산량을 조절하기 위해 어떤 물건이 가장 인기 있는지 확인해봅시다.

지시사항
물건의 이름(name)과 물건 별 판매량(amount)의 합을 검색하세요. 단 해당 물건의 총 판매 수익(revenue)의 합이 50000이상인 것만 검색해봅시다.

+----------+-------------+
| name     | SUM(amount) |
+----------+-------------+
| carrot   |         110 |
| clock    |           2 |
| onion    |          30 |
| umbrella |           5 |
+----------+-------------+

-- 지시사항을 만족하는 쿼리를 작성해보세요.

SELECT name, SUM(amount) as total_amount
FROM sale
GROUP BY name
HAVING SUM(revenue) >= 50000;

[부서별 인원 수 검색하기]

주식회사 엘리스의 사원들은 자신이 속한 부서를 하나씩 가지고 있습니다.
employees 테이블은 사번, 이름, 부서로 이루어져 있습니다.
어떤 부서에 몇 명의 사람이 있는지 확인해보려고 합니다.

지시사항
사원(employees) 테이블에서 부서(dept)별 인원 수를 출력해보세요.

+-----------+----------+
| dept      | COUNT(*) |
+-----------+----------+
| 생산부    |        5 |
| 영업부    |        6 |
| 인사부    |        4 |
| 재무부    |        2 |
+-----------+----------+

-- 지시사항을 만족하는 쿼리를 작성해보세요.
SELECT dept, COUNT(*) 
FROM employees
GROUP BY dept;

다수의 테이블 제어하기
4장을 마무리하신 여러분, 진심으로 축하드립니다!
오늘도 많은 것을 배웠는데요 🤔
잊기 전에 이번 장에서 배웠던 내용을 어서 복습하러 갑시다! 🤗


1. 데이터 그룹 짓기
Point I
GROUP BY: 원하는 데이터끼리 그룹화하는 명령어

SELECT user_id, COUNT(*) --검색할 컬럼
FROM rental --테이블
GROUP BY user_id; --그룹의 기준 컬럼
rental 테이블에서 user_id가 같은 데이터끼리 그룹화
Point II
GROUP BY 활용

SELECT user_id, SUM(column) FROM rental GROUP BY user_id;
--user_id가 같은 열에서 컬럼의 내용을 다 더한 값을 출력

SELECT user_id, AVG(column) FROM rental GROUP BY user_id;
--user_id가 같은 열의 컬럼의 평균을 출력

SELECT user_id, MAX(column) FROM rental GROUP BY user_id;
--user_id가 같은 열에서 해당 컬럼의 가장 큰 데이터를 출력

SELECT user_id, MIN(column) FROM rental GROUP BY user_id;
--user_id가 같은 열에서 해당 컬럼의 가장 작은 데이터를 출력


2. 데이터 그룹에 조건 적용하기
HAVING: 데이터 그룹에 조건을 적용하여 검색하는 명령어로, GROUP BY와 함께 사용

SELECT user_id, COUNT(*) --검색할 컬럼
FROM rental --테이블
GROUP BY user_id --그룹의 기준 컬럼
HAVING COUNT(user_id) > 1; --조건
rental 테이블에서 user_id가 같은 1개 초과의 데이터가 몇 개 있는지 검색


3. 여러 테이블에서 조회하기
Point I
INNER JOIN: 두 테이블의 정보를 한 번에 조회하는 명령어 (두 테이블 중 겹치는 부분만 출력)

SELECT * FROM rental
INNER JOIN user; --연결할 테이블
Point II
ON: 조건을 적용해 두 개의 테이블을 조회할 때 사용하는 명령어

SELECT * FROM rental
INNER JOIN user
ON user.id = rental.user_id; --연결 조건 컬럼
rental 테이블과 user 테이블의 정보 중 user_id가 같은 것끼리 연결
테이블.컬럼명으로 구분


4. LEFT JOIN & RIGHT JOIN
Point I
LEFT JOIN: 왼쪽 테이블의 모든 값을 포함하여 연결하는 명령어로, 왼쪽 데이터와 겹치는 부분을 출력

SELECT * FROM user
LEFT JOIN rental
ON user.id = rental.user_id;
user 테이블을 모두 출력하되, 모든 user 테이블의 user_id와 rental 테이블의 id가 겹치도록 합친다.
Point II
RIGHT JOIN: 오른쪽 테이블의 모든 값을 포함하여 연결하는 명령어로, 오른쪽 데이터와 겹치는 부분 출력

SELECT * FROM user
RIGHT JOIN rental
ON user.id = rental.user_id;
rental 테이블을 모두 출력하되, 모든 rental 테이블의 user_id와 user 테이블의 id가 겹치도록 합친다.
